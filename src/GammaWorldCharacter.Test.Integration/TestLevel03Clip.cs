using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using GammaWorldCharacter;
using GammaWorldCharacter.Gear;
using GammaWorldCharacter.Origins;
using GammaWorldCharacter.Powers;
using GammaWorldCharacter.Traits;
using GammaWorldCharacter.Samples;
using GammaWorldCharacter.Test.Integration;

namespace GammaWorldCharacter.Test.Integration
{
    /// <summary> 
    /// Autogenerated character test
    /// </summary>
    [TestFixture]
    public class TestLevel03Clip : CharacterTest
    {
        private Character testCharacter;

        [TestCase(ScoreType.Strength, 12)]
        [TestCase(ScoreType.Constitution, 18)]
        [TestCase(ScoreType.Dexterity, 11)]
        [TestCase(ScoreType.Intelligence, 16)]
        [TestCase(ScoreType.Wisdom, 10)]
        [TestCase(ScoreType.Charisma, 15)]
        [TestCase(ScoreType.StrengthModifier, 1)]
        [TestCase(ScoreType.ConstitutionModifier, 4)]
        [TestCase(ScoreType.DexterityModifier, 0)]
        [TestCase(ScoreType.IntelligenceModifier, 3)]
        [TestCase(ScoreType.WisdomModifier, 0)]
        [TestCase(ScoreType.CharismaModifier, 2)]
        [TestCase(ScoreType.Initiative, 3)]
        [TestCase(ScoreType.HitPoints, 40)]
        [TestCase(ScoreType.Bloodied, 20)]
        [TestCase(ScoreType.ArmorClass, 20)]
        [TestCase(ScoreType.Fortitude, 19)]
        [TestCase(ScoreType.Reflex, 18)]
        [TestCase(ScoreType.Will, 15)]
        [TestCase(ScoreType.Speed, 6)]
        [TestCase(ScoreType.Fly, 0)]
        [TestCase(ScoreType.Climb, 6)]
        [TestCase(ScoreType.Swim, 0)]
        [TestCase(ScoreType.SavingThrows, 0)]
        [TestCase(ScoreType.Acrobatics, 3)]
        [TestCase(ScoreType.Athletics, 4)]
        [TestCase(ScoreType.Conspiracy, 6)]
        [TestCase(ScoreType.Insight, 3)]
        [TestCase(ScoreType.Interaction, 5)]
        [TestCase(ScoreType.Mechanics, 10)]
        [TestCase(ScoreType.Nature, 3)]
        [TestCase(ScoreType.Perception, 3)]
        [TestCase(ScoreType.Science, 14)]
        [TestCase(ScoreType.Stealth, 3)]
        [TestCase(ScoreType.Level, 3)]
        [TestCase(ScoreType.OpportunityAttackAttackBonus, 0)]
        [TestCase(ScoreType.OpportunityAttackArmorClassBonus, 0)]
        [TestCase(ScoreType.StrengthCheck, 4)]
        [TestCase(ScoreType.ConstitutionCheck, 7)]
        [TestCase(ScoreType.DexterityCheck, 3)]
        [TestCase(ScoreType.IntelligenceCheck, 6)]
        [TestCase(ScoreType.WisdomCheck, 3)]
        [TestCase(ScoreType.CharismaCheck, 5)]
        [TestCase(ScoreType.FireResistance, 0)]
        [TestCase(ScoreType.ElectricityResistance, 0)]
        [TestCase(ScoreType.ColdResistance, 0)]
        [TestCase(ScoreType.PhysicalResistance, 0)]
        [TestCase(ScoreType.FireVulnerability, 0)]
        public override void TestScore(ScoreType scoreType, int expectedValue)
        {
            base.TestScore(scoreType, expectedValue);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.BasicAttack), 0, 9, 1, DiceType.d10, 7, "physical damage.")]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.EauDeRoach), 0, 7, 2, DiceType.d8, 10, "acid damage and you push the target 1 square.")]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.MachineGrip), 0, 6, 1, DiceType.d10, 9, "physical damage and the target is immobilized until the start of your next turn. If you move to a square that isn't adjacent to the target, the immobilization ends.")]
        public override void TestAttackPower(Type type, int attack, int attackBonus, int damageDiceCount, DiceType damageDiceType, int damageBonus, string additionalText)
        {
            base.TestAttackPower(type, attack, attackBonus, damageDiceCount, damageDiceType, damageBonus, additionalText);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.SecondWind), "You heal 20 hit points and gain +2 to all defenses until the end of your next turn.")]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.BeMyBattery), "You gain temporary immunity to the triggering damage type until the start of your next turn. You also gain 13 temporary hit points.")]
        public override void TestUtilityPower(Type type, string expectedEffect)
        {
            base.TestUtilityPower(type, expectedEffect);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.BasicAttack), ActionType.Standard, AttackType.Melee, "1", 64, null, 0, PowerFrequency.AtWill, PowerSource.None, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.SecondWind), ActionType.Minor, AttackType.Personal, null, 0, "You heal 20 hit points and gain +2 to all defenses until the end of your next turn.", 1, PowerFrequency.Encounter, PowerSource.None, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.EauDeRoach), ActionType.Standard, AttackType.Melee, "1", 1, null, 0, PowerFrequency.AtWill, PowerSource.Bio, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.MachineGrip), ActionType.Standard, AttackType.Melee, "1", 64, null, 0, PowerFrequency.AtWill, PowerSource.Dark, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.BeMyBattery), ActionType.ImmediateInterrupt, AttackType.Personal, null, 0, "You gain temporary immunity to the triggering damage type until the start of your next turn. You also gain 13 temporary hit points.", 0, PowerFrequency.Encounter, PowerSource.Dark, "You take electricity, fire, laser or radiation damage.")]
        public override void TestPower(Type type, ActionType actionType, AttackType attackType, string range, DamageTypes damageTypes, string effect,
            EffectTypes effectTypes, PowerFrequency frequency, PowerSource powerSource, string trigger)
        {
            base.TestPower(type, actionType, attackType, range, damageTypes, effect, effectTypes, frequency, powerSource, trigger);
        }

        /// <summary>
        /// Create the test character.
        /// </summary>
        protected override Character Character
        {
            get
            {
                if (testCharacter == null)
                {
                    testCharacter = Level03Characters.Clip;
                }
                return testCharacter;
            }
        }
    }
}
