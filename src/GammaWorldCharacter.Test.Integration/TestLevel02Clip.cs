using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using GammaWorldCharacter;
using GammaWorldCharacter.Gear;
using GammaWorldCharacter.Origins;
using GammaWorldCharacter.Powers;
using GammaWorldCharacter.Traits;
using GammaWorldCharacter.Samples;
using GammaWorldCharacter.Test.Integration;

namespace GammaWorldCharacter.Test.Integration
{
    /// <summary> 
    /// Autogenerated character test
    /// </summary>
    [TestFixture]
    public class TestLevel02Clip : CharacterTest
    {
        private Character testCharacter;

        [TestCase(ScoreType.Strength, 12)]
        [TestCase(ScoreType.Constitution, 18)]
        [TestCase(ScoreType.Dexterity, 11)]
        [TestCase(ScoreType.Intelligence, 16)]
        [TestCase(ScoreType.Wisdom, 10)]
        [TestCase(ScoreType.Charisma, 15)]
        [TestCase(ScoreType.Initiative, 2)]
        [TestCase(ScoreType.HitPoints, 35)]
        [TestCase(ScoreType.Bloodied, 17)]
        [TestCase(ScoreType.ArmorClass, 19)]
        [TestCase(ScoreType.Fortitude, 18)]
        [TestCase(ScoreType.Reflex, 17)]
        [TestCase(ScoreType.Will, 14)]
        [TestCase(ScoreType.Speed, 6)]
        [TestCase(ScoreType.Fly, 0)]
        [TestCase(ScoreType.Climb, 6)]
        [TestCase(ScoreType.Swim, 0)]
        [TestCase(ScoreType.SavingThrows, 0)]
        [TestCase(ScoreType.Acrobatics, 2)]
        [TestCase(ScoreType.Athletics, 3)]
        [TestCase(ScoreType.Conspiracy, 5)]
        [TestCase(ScoreType.Insight, 2)]
        [TestCase(ScoreType.Interaction, 4)]
        [TestCase(ScoreType.Mechanics, 9)]
        [TestCase(ScoreType.Nature, 2)]
        [TestCase(ScoreType.Perception, 2)]
        [TestCase(ScoreType.Science, 13)]
        [TestCase(ScoreType.Stealth, 2)]
        [TestCase(ScoreType.Level, 2)]
        [TestCase(ScoreType.OpportunityAttackAttackBonus, 0)]
        [TestCase(ScoreType.OpportunityAttackArmorClassBonus, 0)]
        [TestCase(ScoreType.StrengthCheck, 3)]
        [TestCase(ScoreType.ConstitutionCheck, 6)]
        [TestCase(ScoreType.DexterityCheck, 2)]
        [TestCase(ScoreType.IntelligenceCheck, 5)]
        [TestCase(ScoreType.WisdomCheck, 2)]
        [TestCase(ScoreType.CharismaCheck, 4)]
        [TestCase(ScoreType.FireResistance, 0)]
        [TestCase(ScoreType.ElectricityResistance, 0)]
        [TestCase(ScoreType.ColdResistance, 0)]
        [TestCase(ScoreType.PhysicalResistance, 0)]
        [TestCase(ScoreType.FireVulnerability, 0)]
        public override void TestScore(ScoreType scoreType, int expectedValue)
        {
            base.TestScore(scoreType, expectedValue);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.BasicAttack), 0, 8, 1, DiceType.d10, 6, "physical damage.")]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.EauDeRoach), 0, 6, 2, DiceType.d8, 8, "acid damage and you push the target 1 square.")]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.MachineGrip), 0, 5, 1, DiceType.d10, 7, "physical damage and the target is immobilized until the start of your next turn. If you move to a square that isn't adjacent to the target, the immobilization ends.")]
        public override void TestAttackPower(Type type, int attack, int attackBonus, int damageDiceCount, DiceType damageDiceType, int damageBonus, string additionalText)
        {
            base.TestAttackPower(type, attack, attackBonus, damageDiceCount, damageDiceType, damageBonus, additionalText);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.SecondWind))]
        public override void TestUtilityPower(Type type)
        {
            base.TestUtilityPower(type);
        }

        [TestCase(typeof(GammaWorldCharacter.Powers.BasicAttack), ActionType.Standard, AttackType.Melee, "1", 64, null, 0, PowerFrequency.AtWill, PowerSource.None, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.SecondWind), ActionType.Minor, AttackType.Personal, null, 0, "You heal 17 hit points and gain +2 to all defenses until the end of your next turn.", 1, PowerFrequency.Encounter, PowerSource.None, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.EauDeRoach), ActionType.Standard, AttackType.Melee, "1", 1, null, 0, PowerFrequency.AtWill, PowerSource.Bio, null)]
        [TestCase(typeof(GammaWorldCharacter.Powers.Origins.MachineGrip), ActionType.Standard, AttackType.Melee, "1", 64, null, 0, PowerFrequency.AtWill, PowerSource.Dark, null)]
        public override void TestPower(Type type, ActionType actionType, AttackType attackType, string range, DamageTypes damageTypes, string effect,
            EffectTypes effectTypes, PowerFrequency frequency, PowerSource powerSource, string trigger)
        {
            base.TestPower(type, actionType, attackType, range, damageTypes, effect, effectTypes, frequency, powerSource, trigger);
        }

        /// <summary>
        /// Create the test character.
        /// </summary>
        protected override Character Character
        {
            get
            {
                if (testCharacter == null)
                {
                    testCharacter = Level02Characters.Clip;
                }
                return testCharacter;
            }
        }
    }
}
