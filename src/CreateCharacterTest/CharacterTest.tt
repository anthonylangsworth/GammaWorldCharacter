<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="$(SolutionDir)GammaWorldCharacterGenerator\bin\debug\GammaWorldCharacterGenerator.dll" #>
<#@ assembly name="$(SolutionDir)GammaWorldCharacterGenerator.Samples\bin\debug\GammaWorldCharacterGenerator.Samples.dll" #>
<#@ import namespace="GammaWorldCharacterGenerator" #>
<#@ import namespace="GammaWorldCharacterGenerator.Gear" #>
<#@ import namespace="GammaWorldCharacterGenerator.Origins" #>
<#@ import namespace="GammaWorldCharacterGenerator.Powers" #>
<#@ import namespace="GammaWorldCharacterGenerator.Traits" #>
<#@ import namespace="GammaWorldCharacterGenerator.Samples" #>
<#
    // Instructions:
    // 1. Change the character in the assignment operation below, adding 
    //    using statements or assembly references as required.
    // 2. Change the code it the Character property to create this character, 
    //    adding using statements or assembly references as required.
	// 3. Copy CharacterTest.generated.cs to the test assembly and rename.

    GammaWorldCharacter character = Level01Characters.Virtus;
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using GammaWorldCharacter;
using GammaWorldCharacter.Gear;
using GammaWorldCharacter.Origins;
using GammaWorldCharacter.Powers;
using GammaWorldCharacter.Traits;
using GammaWorldCharacter.Samples;
using GammaWorldCharacter.Test.Integration;

namespace GammaWorldCharacter.Test.Integration
{
    /// <summary> 
    /// Autogenerated character test
    /// </summary>
    [TestFixture]
    public class TestLevel<#= character.Level.ToString("00") #><#= character.Name #>: CharacterTest
    {
        private GammaWorldCharacter testCharacter;

<#
    foreach(ScoreType score in Enum.GetValues(typeof(ScoreType)))
    {
#>
        [TestCase(ScoreType.<#= Enum.GetName(typeof(ScoreType), score) #>, <#= character[score].Total #>)]
<#
    }
#>
        public override void TestScore(ScoreType scoreType, int expectedValue)
        {
            base.TestScore(scoreType, expectedValue);
        }

<#
    foreach(AttackPower attackPower in character.GetPowers().Where(x => x is AttackPower))
    {
        for(int attack = 0; attack < attackPower.Attacks.Count; attack++)
        {
            AttackDetails attackDetails = attackPower.Attacks[attack];
            PowerDamage powerDamage = null;
            if(attackDetails.HasDamage)
            {
                powerDamage = attackDetails.Damage;
            }
#>
        [TestCase(typeof(<#= attackPower.GetType().FullName #>), <#= attack #>, <#= attackDetails.AttackBonus.Total #>, <#= powerDamage != null ? powerDamage.Dice.Number : 0 #>, <#= powerDamage != null ? "DiceType." + Enum.GetName(typeof(DiceType), powerDamage.Dice.DiceType) : "0" #>, <#= powerDamage != null ? attackDetails.DamageBonus.Total : 0 #>, "<#= attackDetails.AdditionalText #>")]
<#
        }
    }
#>
        public override void TestAttackPower(Type type, int attack, int attackBonus, int damageDiceCount, DiceType damageDiceType, int damageBonus, string additionalText)
        {
            base.TestAttackPower(type, attack, attackBonus, damageDiceCount, damageDiceType, damageBonus, additionalText);
        }

<#
    foreach(UtilityPower utilityPower in character.GetPowers().Where(x => x is UtilityPower))
    {
#>
        [TestCase(typeof(<#= utilityPower.GetType().FullName #>))]
<#
    }
#>
        public override void TestUtilityPower(Type type)
        {
            base.TestUtilityPower(type);
        }

<#
    foreach(Power power in character.GetPowers())
    {
#>
        [TestCase(typeof(<#= power.GetType().FullName #>), ActionType.<#= power.Action #>, AttackType.<#= power.AttackTypeAndRange.AttackType #>, <#= power.AttackTypeAndRange.Range != null ? "\"" + power.AttackTypeAndRange.Range + "\"" : "null" #>, <#= (int) power.DamageTypes #>, <#= power.HasEffect ? "\"" + power.Effect + "\"" : "null" #>, <#= (int) power.EffectTypes #>, PowerFrequency.<#= power.Frequency #>, PowerSource.<#= power.PowerSource #>, <#= power.HasTrigger ? "\"" + power.Trigger + "\"" : "null" #>)]
<#
    }
#>
        public override void TestPower(Type type, ActionType actionType, AttackType attackType, string range, DamageTypes damageTypes, string effect, 
            EffectTypes effectTypes, PowerFrequency frequency, PowerSource powerSource, string trigger)
        {
            base.TestPower(type, actionType, attackType, range, damageTypes, effect, effectTypes, frequency, powerSource, trigger);
        }

        /// <summary>
        /// Create the test character.
        /// </summary>
        protected override GammaWorldCharacter Character
        {
            get
            {
                if (testCharacter == null)
                {
                    testCharacter = Level01Characters.Virtus;
                }
                return testCharacter;
            }
        }
    }
}
